// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared/Helpers" folder and the "InformationMessageHelper.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning disable
#endif

namespace Bannerlord.BUTR.Shared.Helpers
{
    using global::HarmonyLib.BUTR.Extensions;

    using global::System;
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;

    using global::TaleWorlds.Library;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal class InformationManagerHelper
    {
        private class InformationMessageWrapper
        {
            public static InformationMessageWrapper Create(object @object) => new(@object);

            public object Object { get; }

            public InformationMessageWrapper(object @object)
            {
                Object = @object;
            }
        }

        private static class InformationMessageUtils
        {
            private delegate object CtorV1Delegate(string information, Color color);
            private static readonly CtorV1Delegate? CtorV1;

            static InformationMessageUtils()
            {
                var type = AccessTools2.TypeByName("TaleWorlds.Core.InformationMessage") ??
                           AccessTools2.TypeByName("TaleWorlds.Library.InformationMessage");

                if (AccessTools2.Constructor(type, new[] { typeof(string), typeof(Color) }) is { } v1)
                    CtorV1 = AccessTools2.GetDelegate<CtorV1Delegate>(v1);
            }

            public static InformationMessageWrapper? Create(string information, Color color)
            {
                if (CtorV1 is not null)
                    return InformationMessageWrapper.Create(CtorV1(information, color));

                return null;
            }
        }

        private static class InformationManagerUtils
        {
            private delegate void DisplayMessageV1Delegate(object data);
            private static readonly DisplayMessageV1Delegate? DisplayMessageV1;

            static InformationManagerUtils()
            {
                var type = AccessTools2.TypeByName("TaleWorlds.Core.InformationManager") ??
                           AccessTools2.TypeByName("TaleWorlds.Library.InformationManager");

                var informationMessageType = AccessTools2.TypeByName("TaleWorlds.Core.InformationMessage") ??
                                             AccessTools2.TypeByName("TaleWorlds.Library.InformationMessage");

                if (AccessTools2.Method(type, "DisplayMessage", new[] { informationMessageType }) is { } v1)
                    DisplayMessageV1 = AccessTools2.GetDelegate<DisplayMessageV1Delegate>(v1);
            }

            public static void DisplayMessage(string information, Color color)
            {
                var message = InformationMessageUtils.Create(information, color);

                if (message is null)
                    return;

                if (DisplayMessageV1 is not null)
                    DisplayMessageV1(message.Object);
            }
        }

        public static void DisplayMessage(string information, Color color)
        {
            InformationManagerUtils.DisplayMessage(information, color);
        }
    }
}

#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning restore
#endif
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE