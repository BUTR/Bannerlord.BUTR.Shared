// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared/Helpers" folder and the "FSIOHelper.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning disable
#endif

namespace Bannerlord.BUTR.Shared.Helpers
{
#if !BANNERLORDBUTRSHARED_BUTTERLIB
    using global::Bannerlord.BUTR.Shared.Extensions;
#else
    using global::Bannerlord.ButterLib.Common.Extensions;
#endif

    using global::HarmonyLib.BUTR.Extensions;

    using global::System;
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Reflection;
    using global::System.Linq;

    using global::TaleWorlds.Library;
    using global::TaleWorlds.Engine;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal class FSIOHelper
    {
        private readonly struct PlatformDirectoryPathHandle
        {
            private delegate object PlatformDirectoryPathCtorDelegate(object type, string path);

            private static readonly Type EnumType = typeof(ApplicationVersion).Assembly.GetType("TaleWorlds.Library.PlatformFileType");

            private static readonly PlatformDirectoryPathCtorDelegate? PlatformDirectoryPathCtor;

            static PlatformDirectoryPathHandle()
            {
                var platformFileHelperPCType = typeof(ApplicationVersion).Assembly.GetType("TaleWorlds.Library.PlatformDirectoryPath");
                PlatformDirectoryPathCtor = AccessTools2.GetDelegate<PlatformDirectoryPathCtorDelegate>(platformFileHelperPCType.GetConstructors().First());
            }

            public static PlatformDirectoryPathHandle? Create(int type, string path) =>
                PlatformDirectoryPathCtor is null ? null : new(PlatformDirectoryPathCtor(Enum.ToObject(EnumType, type), path));

            public static PlatformDirectoryPathHandle? CreateConfigPath() =>
                PlatformDirectoryPathCtor is null ? null : new(PlatformDirectoryPathCtor(0, "Configs"));

            internal readonly object PlatformDirectoryPath;

            public PlatformDirectoryPathHandle(object platformDirectoryPath) =>
                PlatformDirectoryPath = platformDirectoryPath;
        }

        private readonly struct PlatformFileHelperPCHandle
        {
            private delegate object PlatformFileHelperPCCtorDelegate(string applicationName);

            private delegate string GetDirectoryFullPathDelegate(object instance, object directoryPath);

            private delegate object? GetPlatformFileHelperDelegate();

            private static readonly PlatformFileHelperPCCtorDelegate? PlatformFileHelperPCCtor;
            private static readonly GetDirectoryFullPathDelegate? GetDirectoryFullPathMethod;
            private static readonly GetPlatformFileHelperDelegate? GetPlatformFileHelperMethod;

            static PlatformFileHelperPCHandle()
            {
                var platformFileHelperPCType = typeof(ApplicationVersion).Assembly.GetType("TaleWorlds.Library.PlatformFileHelperPC");
                PlatformFileHelperPCCtor = AccessTools2.GetDelegate<PlatformFileHelperPCCtorDelegate>(platformFileHelperPCType.GetConstructors().First());
                GetDirectoryFullPathMethod = AccessTools2.GetDelegate<GetDirectoryFullPathDelegate>(platformFileHelperPCType.GetMethod("GetDirectoryFullPath", BindingFlags.Instance | BindingFlags.NonPublic));
                var commonType = typeof(ApplicationVersion).Assembly.GetType("TaleWorlds.Library.Common");
                var property = commonType.GetProperty("PlatformFileHelper");
                GetPlatformFileHelperMethod = AccessTools2.GetDelegate<GetPlatformFileHelperDelegate>(property.GetGetMethod(true));
            }

            public static PlatformFileHelperPCHandle? Create(string applicationName) =>
                PlatformFileHelperPCCtor is null ? null : new(PlatformFileHelperPCCtor(applicationName));

            public static PlatformFileHelperPCHandle? Get()
            {
                if (GetPlatformFileHelperMethod is null)
                    return null;
                else
                {
                    var platformHelper = GetPlatformFileHelperMethod();
                    var platformFileHelperPCType = typeof(ApplicationVersion).Assembly.GetType("TaleWorlds.Library.PlatformFileHelperPC");
                    if (platformHelper?.GetType() != platformFileHelperPCType)
                        return null;

                    return new(platformHelper);
                }
            }

            private readonly object _platformFileHelperPC;

            public PlatformFileHelperPCHandle(object platformFileHelperPC) =>
                _platformFileHelperPC = platformFileHelperPC;

            public string? GetDirectoryFullPath(PlatformDirectoryPathHandle directoryPath) =>
                GetDirectoryFullPathMethod is null ? null : GetDirectoryFullPathMethod(_platformFileHelperPC, directoryPath.PlatformDirectoryPath);
        }


        private delegate string GetConfigsPathDelegate();

        private static readonly GetConfigsPathDelegate? GetConfigsPathMethod;

        static FSIOHelper()
        {
            var utilitiesType = typeof(BoundingBox).Assembly.GetType("TaleWorlds.Engine.Utilities");
            GetConfigsPathMethod = AccessTools2.GetDelegate<GetConfigsPathDelegate>(utilitiesType.GetMethod("GetConfigsPath"));
        }


        public static string? GetConfigPath()
        {
            if (ApplicationVersionHelper.GameVersion() is not { } gameVersion)
                return null;
            if (!ApplicationVersionHelper.TryParse("e1.5.9", out var e159))
                return null;
            if (!ApplicationVersionHelper.TryParse("e1.5.10", out var e1510))
                return null;

            var comparer = new ApplicationVersionWithoutGameTypeComparer();
            switch (gameVersion)
            {
                case var a when comparer.Compare(a, e1510) < 0:
                {
                    if (GetConfigsPathMethod is null)
                        return null;

                    return GetConfigsPathMethod();
                }
                case var a when comparer.Compare(a, e1510) >= 0:
                {
                    if (PlatformFileHelperPCHandle.Get() is not { } platformFileHelper)
                        return null;

                    if (PlatformDirectoryPathHandle.CreateConfigPath() is not { } configPath)
                        return null;

                    return platformFileHelper.GetDirectoryFullPath(configPath);
                }
            }

            return null;
        }
    }
}

#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning restore
#endif
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE