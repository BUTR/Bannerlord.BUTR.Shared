// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared/Helpers" folder and the "MessageBoxWrapper.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
// 
// Copyright (c) Bannerlord's Unofficial Tools & Resources
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning disable
#endif

namespace Bannerlord.BUTR.Shared.Helpers
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Linq;
    using global::System.Reflection;
    using global::HarmonyLib.BUTR.Extensions;

    internal enum DialogResult
    {
        None,
        OK,
        Cancel,
        Abort,
        Retry,
        Ignore,
        Yes,
        No,
    }
    
    internal enum MessageBoxButtons
    {
        OK = 0,
        OKCancel = 1,
        AbortRetryIgnore = 2,
        YesNoCancel = 3,
        YesNo = 4,
        RetryCancel = 5,
    }
    
    internal enum MessageBoxIcon
    {
        None = 0,
        Error = 16,
        Hand = 16,
        Stop = 16,
        Question = 32,
        Exclamation = 48,
        Warning = 48,
        Asterisk = 64,
        Information = 64,
    }
    
    internal enum MessageBoxDefaultButton
    {
        Button1 = 0,
        Button2 = 256,
        Button3 = 512,
    }
    
    [Flags]
    internal enum MessageBoxOptions
    {
        ServiceNotification = 2097152,
        DefaultDesktopOnly = 131072,
        RightAlign = 524288,
        RtlReading = 1048576,
    }
    
    // Reflection is intentionally simple
#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal static class MessageBoxWrapper
    {
        private static readonly Type? MessageBoxType = AccessTools2.TypeByName("System.Windows.Forms.MessageBox");
        private static readonly Type? DialogResultType = AccessTools2.TypeByName("System.Windows.Forms.DialogResult");
        private static readonly Type? MessageBoxButtonsType = AccessTools2.TypeByName("System.Windows.Forms.MessageBoxButtons");
        private static readonly Type? MessageBoxIconType = AccessTools2.TypeByName("System.Windows.Forms.MessageBoxIcon");
        private static readonly Type? MessageBoxDefaultButtonType = AccessTools2.TypeByName("System.Windows.Forms.MessageBoxDefaultButton");
        private static readonly Type? MessageBoxOptionsType = AccessTools2.TypeByName("System.Windows.Forms.MessageBoxOptions");

        private static MethodInfo? ShowMethodInfo = MessageBoxType?.GetMethods().FirstOrDefault(x => x.Name == "Show" && x.GetParameters() is { Length: 3 } parameters &&
                                                                                                     parameters[0].ParameterType == typeof(string) &&
                                                                                                     parameters[1].ParameterType == typeof(string) &&
                                                                                                     parameters[2].ParameterType == MessageBoxButtonsType);
        private delegate Enum ShowDelegate(string text, string caption, Enum buttons);
        private static readonly ShowDelegate? ShowMethod = AccessTools2.GetDelegate<ShowDelegate>(ShowMethodInfo!);

        private static MethodInfo? Show2MethodInfo = MessageBoxType?.GetMethods().FirstOrDefault(x => x.Name == "Show" && x.GetParameters() is { Length: 6 } parameters &&
                                                                                                      parameters[0].ParameterType == typeof(string) &&
                                                                                                      parameters[1].ParameterType == typeof(string) &&
                                                                                                      parameters[2].ParameterType == MessageBoxButtonsType &&
                                                                                                      parameters[3].ParameterType == MessageBoxIconType &&
                                                                                                      parameters[4].ParameterType == MessageBoxDefaultButtonType &&
                                                                                                      parameters[5].ParameterType == MessageBoxOptionsType);
        private delegate Enum ShowDelegate2(string text, string caption, Enum buttons, Enum icon, Enum defaultButton, Enum options);
        private static readonly ShowDelegate2? Show2Method = AccessTools2.GetDelegate<ShowDelegate2>(Show2MethodInfo!);

        public static DialogResult Show(string text, string caption, MessageBoxButtons buttons)
        {
            if (ShowMethod is null)
                return DialogResult.None;

            return (DialogResult) ShowMethod(text, caption, buttons);
        }
        
        public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options)
        {
            if (Show2Method is null)
                return DialogResult.None;

            return (DialogResult) Show2Method(text, caption, buttons, icon, defaultButton, options);
        }
    }
}

#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning restore
#endif
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE