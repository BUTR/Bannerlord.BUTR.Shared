// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared\Extensions" folder and the "DictionaryExtensions.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
// 
// Copyright (c) Bannerlord's Unofficial Tools & Resources
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning disable
#endif

namespace Bannerlord.BUTR.Shared.Extensions
{
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Collections.Generic;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal static class DictionaryExtensions
    {
        /// <summary>
        /// Deconstructs a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> into two variables
        /// containing a key and a value respectively.
        /// </summary>
        /// <typeparam name="TKey">The type of the key used in the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</typeparam>
        /// <typeparam name="TValue">The type of the value used in the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</typeparam>
        /// <param name="tuple">An original pair of key and value.</param>
        /// <param name="key">Deconstructed key.</param>
        /// <param name="value">Deconstructed value.</param>
        public static void Deconstruct<TKey, TValue>(this KeyValuePair<TKey, TValue> tuple, out TKey key, out TValue value)
        {
            key = tuple.Key;
            value = tuple.Value;
        }

        /// <summary>
        /// Adds all the new entries from the specified <see cref="T:System.Collections.Generic.Dictionary`2" /> to the targeted one.
        /// </summary>
        /// <typeparam name="TKey">The type of the key used in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</typeparam>
        /// <typeparam name="TValue">The type of the value used in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</typeparam>
        /// <param name="destinationDict">The <see cref="T:System.Collections.Generic.Dictionary`2" /> to add new entries to.</param>
        /// <param name="otherDict">The <see cref="T:System.Collections.Generic.Dictionary`2" /> with the new entries to be added.</param>
        /// <param name="overrideDuplicates">
        /// Controls the behavior of the method when dealing with duplicates.
        /// If set to true, entries from the added <see cref="T:System.Collections.Generic.Dictionary`2" /> will overwrite
        /// the value of entries with the same key in the target <see cref="T:System.Collections.Generic.Dictionary`2" />.
        /// Otherwise, duplicates will be ignored.
        /// </param>
        /// <remarks>
        /// Use this if the added <see cref="T:System.Collections.Generic.Dictionary`2" /> may contain duplicates.
        /// Initiates both dictionaries if they are null.
        /// </remarks>
        public static void AddRangeCautiously<TKey, TValue>(this Dictionary<TKey, TValue> destinationDict, Dictionary<TKey, TValue> otherDict, bool overrideDuplicates = false)
        {
            destinationDict ??= new();
            otherDict ??= new();
            foreach (KeyValuePair<TKey, TValue> entry in otherDict)
            {
                if (!destinationDict.ContainsKey(entry.Key))
                {
                    destinationDict.Add(entry.Key, entry.Value);
                }
                else if (overrideDuplicates)
                {
                    destinationDict[entry.Key] = entry.Value;
                }
            }
        }

        /// <summary>
        /// Adds all the new entries from the specified <see cref="T:System.Collections.Generic.Dictionary`2" /> to the targeted one.
        /// </summary>
        /// <typeparam name="TKey">The type of the key used in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</typeparam>
        /// <typeparam name="TValue">The type of the value used in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</typeparam>
        /// <param name="destinationDict">The <see cref="T:System.Collections.Generic.Dictionary`2" /> to add new entries to.</param>
        /// <param name="otherDict">The <see cref="T:System.Collections.Generic.Dictionary`2" /> with the new entries to be added.</param>
        /// <remarks>Use this for improved performance when it is certain that the <see cref="T:System.Collections.Generic.Dictionary`2" /> being added will not contain any duplicates.</remarks>
        public static void AddRange<TKey, TValue>(this Dictionary<TKey, TValue> destinationDict, Dictionary<TKey, TValue> otherDict)
        {
            foreach (KeyValuePair<TKey, TValue> entry in otherDict)
            {
                destinationDict.Add(entry.Key, entry.Value);
            }
        }
    }
}

#if !BANNERLORDBUTRSHARED_ENABLE_WARNINGS
#pragma warning restore
#endif
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE