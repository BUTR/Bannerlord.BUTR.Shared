// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared" folder and the "Bannerlord.BUTR.Shared.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
// 
// Copyright (c) Bannerlord's Unofficial Tools & Resources
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#pragma warning disable

// https://github.com/tdupont750/tact.net/blob/9d73a912dfd64bbd7fa88d3d1460c23c848af61a/framework/src/Tact/Reflection/EfficientInvoker.cs
namespace Tact.Reflection
{
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;

    using global::System;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Linq.Expressions;
    using global::System.Reflection;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal sealed class EfficientInvoker
    {
        private static readonly ConcurrentDictionary<ConstructorInfo, Func<object[], object>?> ConstructorToWrapperMap = new();
        private static readonly ConcurrentDictionary<MethodKey, Func<object, object[], object>?> MethodToWrapperMap = new(MethodKeyComparer.Instance);

        public static Func<object[], object>? ForConstructor(ConstructorInfo constructor)
        {
            if (constructor == null) return null;

            return ConstructorToWrapperMap.GetOrAdd(constructor, t =>
            {
                CreateParamsExpressions(constructor, out ParameterExpression argsExp, out Expression[] paramsExps);

                var newExp = Expression.New(constructor, paramsExps);
                var resultExp = Expression.Convert(newExp, typeof(object));
                var lambdaExp = Expression.Lambda(resultExp, argsExp);
                var lambda = lambdaExp.Compile();
                return (Func<object[], object>)lambda;
            });
        }

        public static Func<object, object[], object>? ForMethod(Type type, string methodName)
        {
            if (type == null) return null;
            if (methodName == null) return null;

            var key = new MethodKey(type, methodName);
            return MethodToWrapperMap.GetOrAdd(key, k =>
            {
                var method = k.Type.GetTypeInfo().GetMethod(k.Name);
                if (method == null) return null;

                return CreateMethodWrapper(k.Type, method, false);
            });
        }


        private static Func<object, object[], object> CreateMethodWrapper(Type type, MethodInfo method, bool isDelegate)
        {
            CreateParamsExpressions(method, out ParameterExpression argsExp, out Expression[] paramsExps);

            var targetExp = Expression.Parameter(typeof(object), "target");
            var castTargetExp = Expression.Convert(targetExp, type);
            var invokeExp = isDelegate
                ? (Expression)Expression.Invoke(castTargetExp, paramsExps)
                : Expression.Call(castTargetExp, method, paramsExps);

            LambdaExpression lambdaExp;
            
            if (method.ReturnType != typeof(void))
            {
                var resultExp = Expression.Convert(invokeExp, typeof(object));
                lambdaExp = Expression.Lambda(resultExp, targetExp, argsExp);
            }
            else
            {
                var constExp = Expression.Constant(null, typeof(object));
                var blockExp = Expression.Block(invokeExp, constExp);
                lambdaExp = Expression.Lambda(blockExp, targetExp, argsExp);
            }

            var lambda = lambdaExp.Compile();
            return (Func<object, object[], object>)lambda;
        }

        private static void CreateParamsExpressions(MethodBase method, out ParameterExpression argsExp, out Expression[] paramsExps)
        {
            var parameters = method.GetParameters().Select(p => p.ParameterType).ToArray();

            argsExp = Expression.Parameter(typeof(object[]), "args");
            paramsExps = new Expression[parameters.Length];

            for (var i = 0; i < parameters.Length; i++)
            {
                var constExp = Expression.Constant(i, typeof(int));
                var argExp = Expression.ArrayIndex(argsExp, constExp);
                paramsExps[i] = Expression.Convert(argExp, parameters[i]);
            }
        }


        private class MethodKeyComparer : IEqualityComparer<MethodKey>
        {
            public static readonly MethodKeyComparer Instance = new MethodKeyComparer();

            public bool Equals(MethodKey x, MethodKey y) => x.Type == y.Type && StringComparer.Ordinal.Equals(x.Name, y.Name);

            public int GetHashCode(MethodKey key) => CombineHashCodes(key.Type.GetHashCode(), key.Name.GetHashCode());

            // From System.Web.Util.HashCodeCombiner
            private static int CombineHashCodes(int h1, int h2) => ((h1 << 5) + h1) ^ h2;
        }

        private readonly struct MethodKey
        {
            public readonly Type Type;
            public readonly string Name;

            public MethodKey(Type type, string name)
            {
                Type = type;
                Name = name;
            }
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE
