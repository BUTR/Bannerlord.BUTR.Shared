// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared" folder and the "Bannerlord.BUTR.Shared.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
// 
// Copyright (c) Bannerlord's Unofficial Tools & Resources
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#pragma warning disable

namespace Bannerlord.BUTR.Shared
{
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;

    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Xml;

    using global::Tact.Reflection;

    using global::TaleWorlds.Localization;
    using global::TaleWorlds.Library;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal static class ApplicationVersionUtils
    {
        public static bool TryParse(string? versionAsString, out ApplicationVersion version)
        {
            var major = 0;
            var minor = 0;
            var revision = 0;
            var changeSet = 0;
            bool skipCheck = false;
            version = default;
            if (versionAsString is null)
                return false;

            var array = versionAsString.Split('.');
            if (array.Length != 3 && array.Length != 4 && array[0].Length == 0)
                return false;

            var applicationVersionType = ApplicationVersion.ApplicationVersionTypeFromString(array[0][0].ToString());
            if (!skipCheck && !int.TryParse(array[0].Substring(1), out major))
            {
                if (array[0].Substring(1) != "*") return false;
                major = int.MinValue;
                minor = int.MinValue;
                revision = int.MinValue;
                changeSet = int.MinValue;
                skipCheck = true;
            }
            if (!skipCheck && !int.TryParse(array[1], out minor))
            {
                if (array[1] != "*") return false;
                minor = 0;
                revision = 0;
                changeSet = 0;
                skipCheck = true;
            }
            if (!skipCheck && !int.TryParse(array[2], out revision))
            {
                if (array[2] != "*") return false;
                revision = 0;
                changeSet = 0;
                skipCheck = true;
            }

            if (!skipCheck && array.Length == 4 && !int.TryParse(array[3], out changeSet))
            {
                if (array[3] != "*") return false;
                changeSet = 0;
                skipCheck = true;
            }

            version = new ApplicationVersion(applicationVersionType, major, minor, revision, changeSet, ApplicationVersionGameType.Singleplayer);
            return true;
        }

        public static string ToString(ApplicationVersion av)
        {
            string prefix = ApplicationVersion.GetPrefix(av.ApplicationVersionType);
            var def = ApplicationVersion.FromParametersFile(ApplicationVersionGameType.Singleplayer);
            return $"{prefix}{av.Major}.{av.Minor}.{av.Revision}{(av.ChangeSet == def.ChangeSet ? "" : $".{av.ChangeSet}")}";
        }
    }

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal static class TextObjectUtils
    {
        private static readonly Func<object[], object>? TextObjectInvoker;

        static TextObjectUtils()
        {
            if (typeof(TextObject).GetConstructors().FirstOrDefault() is { } constructorInfo)
                TextObjectInvoker = EfficientInvoker.ForConstructor(constructorInfo);
        }

        public static TextObject? Create(string value) => TextObjectInvoker?.Invoke(new object[] { value, null! }) as TextObject;
    }

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal readonly struct DependedModule
    {
        public string ModuleId { get; init; }
        public ApplicationVersion Version { get; init; }
    }

    internal enum LoadType
    {
        NONE           = 0,
        LoadAfterThis  = 1,
        LoadBeforeThis = 2
    }

    internal enum LoadTypeParse
    {
        LoadAfterThis  = 1,
        LoadBeforeThis = 2
    }

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal readonly struct DependedModuleMetadata
    {
        public string Id { get; init; }
        public LoadType LoadType { get; init; }
        public bool IsOptional { get; init; }
        public bool IsIncompatible { get; init; }
        public ApplicationVersion Version { get; init; }

        internal static string GetLoadType(LoadType loadType) => loadType switch
        {
            LoadType.NONE           => "",
            LoadType.LoadAfterThis  => "Before       ",
            LoadType.LoadBeforeThis => "After        ",
            _                       => "ERROR        "
        };
        private static string GetVersion(ApplicationVersion av) => av.IsSame(ApplicationVersion.Empty) ? "" : $" {av}";
        private static string GetOptional(bool isOptional) => isOptional ? " Optional" : "";
        private static string GetIncompatible(bool isOptional) => isOptional ? "Incompatible " : "";
        public override string ToString() => GetLoadType(LoadType) + GetIncompatible(IsIncompatible) + Id + GetVersion(Version) + GetOptional(IsOptional);
    }

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal sealed class SubModuleInfo2 : IEquatable<SubModuleInfo2>
    {
        public enum SubModuleTags
        {
            RejectedPlatform,
            ExclusivePlatform,
            DedicatedServerType,
            IsNoRenderModeElement,
            DependantRuntimeLibrary
        }

        public string Name { get; internal set; } = string.Empty;
		public string DLLName { get; internal set; } = string.Empty;
		public bool DLLExists { get; internal set; }
		public List<string> Assemblies { get; internal set; } = new();
		public string SubModuleClassType { get; internal set; } = string.Empty;
        public List<Tuple<SubModuleTags, string>> Tags { get; internal set; } = new();

		public void LoadFrom(XmlNode subModuleNode, string path)
		{
            Assemblies.Clear();
			Tags.Clear();
			Name = subModuleNode?.SelectSingleNode("Name")?.Attributes["value"]?.InnerText ?? string.Empty;
			DLLName = subModuleNode?.SelectSingleNode("DLLName")?.Attributes["value"]?.InnerText ?? string.Empty;
			string text = Path.Combine(path, "bin\\Win64_Shipping_Client", DLLName);
			if (!string.IsNullOrEmpty(DLLName))
			{
				DLLExists = File.Exists(text);
            }
			SubModuleClassType = subModuleNode?.SelectSingleNode("SubModuleClassType")?.Attributes["value"]?.InnerText ?? string.Empty;
			if (subModuleNode?.SelectSingleNode("Assemblies") != null)
			{
				var assembliesList = subModuleNode?.SelectSingleNode("Assemblies")?.SelectNodes("Assembly");
				for (var i = 0; i < assembliesList?.Count; i++)
				{
                    if (assembliesList[i]?.Attributes["value"]?.InnerText is { } value)
					    Assemblies.Add(value);
				}
			}

            var tagsList = subModuleNode?.SelectSingleNode("Tags")?.SelectNodes("Tag");
            for (var i = 0; i < tagsList?.Count; i++)
			{
                if (tagsList[i]?.Attributes["key"]?.InnerText is { } key && tagsList[i]?.Attributes["value"]?.InnerText is { } value && Enum.TryParse<SubModuleTags>(key, out var subModuleTags))
				{
                    Tags.Add(new Tuple<SubModuleTags, string>(subModuleTags, value));
                }
			}
		}

        public override string ToString() => Name;

        public bool Equals(SubModuleInfo2? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }
        public override bool Equals(object? obj) =>
            ReferenceEquals(this, obj) || (obj is SubModuleInfo2 other && Equals(other));

        public override int GetHashCode() => Name.GetHashCode();

        public static bool operator ==(SubModuleInfo2? left, SubModuleInfo2? right) => Equals(left, right);
        public static bool operator !=(SubModuleInfo2? left, SubModuleInfo2? right) => !Equals(left, right);
    }

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal sealed class ModuleInfo2 : IEquatable<ModuleInfo2>
    {
        private static string NativeModuleId = "Native";
        private static string[] OfficialModuleIds = { NativeModuleId, "SandBox", "SandBoxCore", "StoryMode", "CustomBattle" };
        public static string PathPrefix => Path.Combine(BasePath.Name, "Modules");

        public string Id { get; internal set; } = string.Empty;
        public string Name { get; internal set; } = string.Empty;
        public bool IsOfficial { get; internal set; }
        public ApplicationVersion Version { get; internal set; }
        public string Alias { get; internal set; } = string.Empty;
        public bool IsSingleplayerModule { get; internal set; }
        public bool IsMultiplayerModule { get; internal set; }
        public bool IsSelected { get; set; }
        public List<SubModuleInfo2> SubModules { get; internal set; } = new();
        public List<DependedModule> DependedModules { get; internal set; } = new();

        public string Url { get; internal set; } = string.Empty;

        public List<DependedModuleMetadata> DependedModuleMetadatas { get; internal set; }  = new();

        public void Load(string alias)
        {
            Alias = alias;
            SubModules.Clear();
            DependedModules.Clear();
            DependedModuleMetadatas.Clear();

            var xmlDocument = new XmlDocument();
            xmlDocument.Load(Path.Combine(PathPrefix, alias, "SubModule.xml"));

            var moduleNode = xmlDocument.SelectSingleNode("Module");

            Name = moduleNode?.SelectSingleNode("Name")?.Attributes?["value"]?.InnerText ?? string.Empty;
            Id = moduleNode?.SelectSingleNode("Id")?.Attributes?["value"]?.InnerText ?? string.Empty;
            ApplicationVersionUtils.TryParse(moduleNode?.SelectSingleNode("Version")?.Attributes?["value"]?.InnerText, out var parsedVersion);
            Version = parsedVersion;

            IsOfficial = moduleNode?.SelectSingleNode("Official")?.Attributes?["value"]?.InnerText?.Equals("true") == true;
            IsSelected = moduleNode?.SelectSingleNode("DefaultModule")?.Attributes?["value"]?.InnerText?.Equals("true") == true || IsNative();
            IsSingleplayerModule = moduleNode?.SelectSingleNode("SingleplayerModule")?.Attributes?["value"]?.InnerText?.Equals("true") == true;
            IsMultiplayerModule = moduleNode?.SelectSingleNode("MultiplayerModule")?.Attributes?["value"]?.InnerText?.Equals("true") == true;

            var dependedModules = moduleNode?.SelectSingleNode("DependedModules");
            var dependedModulesList = dependedModules?.SelectNodes("DependedModule");
            for (var i = 0; i < dependedModulesList?.Count; i++)
            {
                if (dependedModulesList[i]?.Attributes["Id"] is { } idAttr)
                {
                    ApplicationVersionUtils.TryParse(dependedModulesList[i]?.Attributes?["DependentVersion"]?.InnerText, out var version);
                    DependedModules.Add(new DependedModule
                    {
                        ModuleId = idAttr.InnerText,
                        Version = version
                    });
                }
            }

            var subModules = moduleNode?.SelectSingleNode("SubModules");
            var subModuleList = subModules?.SelectNodes("SubModule");
            for (var i = 0; i < subModuleList?.Count; i++)
            {
                var subModuleInfo = new SubModuleInfo2();
                try
                {
                    subModuleInfo.LoadFrom(subModuleList[i], Path.Combine(PathPrefix, alias));
                    SubModules.Add(subModuleInfo);
                }
                catch { }
            }

            // Custom data
            Url = moduleNode?.SelectSingleNode("Url")?.Attributes?["value"]?.InnerText ?? string.Empty;

            var dependedModuleMetadatas = moduleNode?.SelectSingleNode("DependedModuleMetadatas");
            var dependedModuleMetadatasList = dependedModuleMetadatas?.SelectNodes("DependedModuleMetadata");
            for (var i = 0; i < dependedModuleMetadatasList?.Count; i++)
            {
                if (dependedModuleMetadatasList[i]?.Attributes["id"] is { } idAttr)
                {
                    var incompatible = dependedModuleMetadatasList[i]?.Attributes["incompatible"]?.InnerText.Equals("true") ?? false;
                    if (incompatible)
                    {
                        DependedModuleMetadatas.Add(new DependedModuleMetadata
                        {
                            Id = idAttr.InnerText,
                            LoadType = LoadType.NONE,
                            IsOptional = false,
                            IsIncompatible = incompatible,
                            Version = ApplicationVersion.Empty
                        });
                    }
                    else if (dependedModuleMetadatasList[i]?.Attributes["order"] is { } orderAttr && Enum.TryParse<LoadTypeParse>(orderAttr.InnerText, out var order))
                    {
                        var optional = dependedModuleMetadatasList[i]?.Attributes["optional"]?.InnerText.Equals("true") ?? false;
                        var version = ApplicationVersionUtils.TryParse(dependedModuleMetadatasList[i]?.Attributes["version"]?.InnerText, out var v) ? v : ApplicationVersion.Empty;
                        DependedModuleMetadatas.Add(new DependedModuleMetadata
                        {
                            Id = idAttr.InnerText,
                            LoadType = (LoadType) order,
                            IsOptional = optional,
                            IsIncompatible = incompatible,
                            Version = version
                        });
                    }
                }
            }

            // Fixed Launcher supported optional tag
            var loadAfterModules = moduleNode?.SelectSingleNode("LoadAfterModules");
            var loadAfterModuleList = loadAfterModules?.SelectNodes("LoadAfterModule");
            for (var i = 0; i < loadAfterModuleList?.Count; i++)
            {
                if (loadAfterModuleList[i]?.Attributes["Id"] is { } idAttr)
                {
                    DependedModuleMetadatas.Add(new DependedModuleMetadata
                    {
                        Id = idAttr.InnerText,
                        LoadType = LoadType.NONE,
                        IsOptional = true,
                        IsIncompatible = false,
                        Version = ApplicationVersion.Empty
                    });
                }
            }

            // Bannerlord Launcher supported optional tag
            var optionalDependModules = moduleNode?.SelectSingleNode("OptionalDependModules");
            var optionalDependModuleList =
                (dependedModules?.SelectNodes("OptionalDependModule")?.Cast<XmlNode>() ?? Enumerable.Empty<XmlNode>())
                .Concat(optionalDependModules?.SelectNodes("OptionalDependModule")?.Cast<XmlNode>() ?? Enumerable.Empty<XmlNode>())
                .Concat(optionalDependModules?.SelectNodes("DependModule")?.Cast<XmlNode>() ?? Enumerable.Empty<XmlNode>()).ToList();
            for (var i = 0; i < optionalDependModuleList.Count; i++)
            {
                if (optionalDependModuleList[i]?.Attributes["Id"] is { } idAttr)
                {
                    DependedModuleMetadatas.Add(new DependedModuleMetadata
                    {
                        Id = idAttr.InnerText,
                        LoadType = LoadType.NONE,
                        IsOptional = true,
                        IsIncompatible = false,
                        Version = ApplicationVersion.Empty
                    });
                }
            }

            var requiredGameVersion = moduleNode?.SelectSingleNode("RequiredGameVersion");
            var requiredGameVersionVal = requiredGameVersion?.Attributes?["value"]?.InnerText ?? string.Empty;
            var requiredGameVersionOptional = requiredGameVersion?.Attributes?["optional"]?.InnerText?.Equals("true") == true;
            if (!string.IsNullOrWhiteSpace(requiredGameVersionVal) && ApplicationVersionUtils.TryParse(requiredGameVersionVal, out var gameVersion))
            {
                foreach (var moduleId in OfficialModuleIds)
                {
                    var isNative = moduleId.Equals(NativeModuleId);

                    // Override any existing metadata
                    if (DependedModuleMetadatas.Find(dmm => dmm.Id.Equals(moduleId, StringComparison.Ordinal)) is { } module)
                        DependedModuleMetadatas.Remove(module);

                    DependedModuleMetadatas.Add(new DependedModuleMetadata
                    {
                        Id = moduleId,
                        LoadType = LoadType.LoadBeforeThis,
                        IsOptional = requiredGameVersionOptional && !isNative,
                        IsIncompatible = false,
                        Version = gameVersion
                    });
                }
            }
        }

        public bool IsNative() => Id.Equals(NativeModuleId, StringComparison.OrdinalIgnoreCase);

        public override string ToString() => $"{Id} - {Version}";

        public bool Equals(ModuleInfo2? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return Id == other.Id;
        }
        public override bool Equals(object? obj) =>
            ReferenceEquals(this, obj) || (obj is ModuleInfo2 other && Equals(other));

        public override int GetHashCode() => Id.GetHashCode();

        public static bool operator ==(ModuleInfo2? left, ModuleInfo2? right) => Equals(left, right);
        public static bool operator !=(ModuleInfo2? left, ModuleInfo2? right) => !Equals(left, right);
    }
}

// https://github.com/tdupont750/tact.net/blob/9d73a912dfd64bbd7fa88d3d1460c23c848af61a/framework/src/Tact/Reflection/EfficientInvoker.cs
namespace Tact.Reflection
{
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;

    using global::System;
    using global::System.Collections.Concurrent;
    using global::System.Linq;
    using global::System.Linq.Expressions;
    using global::System.Reflection;

#if !BANNERLORDBUTRSHARED_INCLUDE_IN_CODE_COVERAGE
    [ExcludeFromCodeCoverage, DebuggerNonUserCode]
#endif
    internal sealed class EfficientInvoker
    {
        private static readonly ConcurrentDictionary<ConstructorInfo, Func<object[], object>> ConstructorToWrapperMap = new();

        public static Func<object[], object> ForConstructor(ConstructorInfo constructor)
        {
            if (constructor == null)
                throw new ArgumentNullException(nameof(constructor));

            return ConstructorToWrapperMap.GetOrAdd(constructor, t =>
            {
                CreateParamsExpressions(constructor, out ParameterExpression argsExp, out Expression[] paramsExps);

                var newExp = Expression.New(constructor, paramsExps);
                var resultExp = Expression.Convert(newExp, typeof(object));
                var lambdaExp = Expression.Lambda(resultExp, argsExp);
                var lambda = lambdaExp.Compile();
                return (Func<object[], object>)lambda;
            });
        }

        private static void CreateParamsExpressions(MethodBase method, out ParameterExpression argsExp, out Expression[] paramsExps)
        {
            var parameters = method.GetParameters().Select(p => p.ParameterType).ToArray();

            argsExp = Expression.Parameter(typeof(object[]), "args");
            paramsExps = new Expression[parameters.Length];

            for (var i = 0; i < parameters.Length; i++)
            {
                var constExp = Expression.Constant(i, typeof(int));
                var argExp = Expression.ArrayIndex(argsExp, constExp);
                paramsExps[i] = Expression.Convert(argExp, parameters[i]);
            }
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE
