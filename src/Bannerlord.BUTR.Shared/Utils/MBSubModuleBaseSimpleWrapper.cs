// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared\Utils" folder and the "MBSubModuleBaseSimpleWrapper.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#pragma warning disable

namespace Bannerlord.BUTR.Shared.Utils
{
    using global::HarmonyLib.BUTR.Extensions;

    using global::TaleWorlds.Core;
    using global::TaleWorlds.MountAndBlade;

    /// <summary>
    /// Wraps a <see cref="MBSubModuleBase"/> so protected methods could be called
    /// without a performance hit
    /// </summary>
    public class MBSubModuleBaseSimpleWrapper : MBSubModuleBase
    {
        private delegate void OnSubModuleLoadDelegate();
        private OnSubModuleLoadDelegate? OnSubModuleLoadInstance { get; }
       
        private delegate void OnSubModuleUnloadedDelegate();
        private OnSubModuleUnloadedDelegate? OnSubModuleUnloadedInstance { get; }
       
        private delegate void OnBeforeInitialModuleScreenSetAsRootDelegate();
        private OnBeforeInitialModuleScreenSetAsRootDelegate? OnBeforeInitialModuleScreenSetAsRootInstance { get; }
        
        private delegate void OnGameStartDelegate(Game game, IGameStarter gameStarterObject);
        private OnGameStartDelegate? OnGameStartInstance { get; }
       
        private delegate void OnApplicationTickDelegate(float dt);
        private OnApplicationTickDelegate? OnApplicationTickInstance { get; }
        
        private delegate void InitializeGameStarterDelegate(Game game, IGameStarter starterObject);
        private InitializeGameStarterDelegate? InitializeGameStarterInstance { get; }

        private delegate void AfterRegisterSubModuleObjectsDelegate(bool isSavedCampaign);
        private AfterRegisterSubModuleObjectsDelegate? AfterRegisterSubModuleObjectsInstance { get; }
      
        private delegate void AfterAsyncTickTickDelegate(float dt);
        private AfterAsyncTickTickDelegate? AfterAsyncTickTickInstance { get; }

        public MBSubModuleBase SubModule { get; }

        public MBSubModuleBaseSimpleWrapper(MBSubModuleBase subModule)
        {
            SubModule = subModule;

            OnSubModuleLoadInstance = AccessTools2.GetDelegate<OnSubModuleLoadDelegate, MBSubModuleBase>(subModule, nameof(OnSubModuleLoad));
            OnSubModuleUnloadedInstance = AccessTools2.GetDelegate<OnSubModuleUnloadedDelegate, MBSubModuleBase>(subModule, nameof(OnSubModuleUnloaded));
            OnBeforeInitialModuleScreenSetAsRootInstance = AccessTools2.GetDelegate<OnBeforeInitialModuleScreenSetAsRootDelegate, MBSubModuleBase>(subModule, nameof(OnBeforeInitialModuleScreenSetAsRoot));
            OnGameStartInstance = AccessTools2.GetDelegate<OnGameStartDelegate, MBSubModuleBase>(subModule, nameof(OnGameStart));
            OnApplicationTickInstance = AccessTools2.GetDelegate<OnApplicationTickDelegate, MBSubModuleBase>(subModule, nameof(OnApplicationTick));
            InitializeGameStarterInstance = AccessTools2.GetDelegate<InitializeGameStarterDelegate, MBSubModuleBase>(subModule, nameof(InitializeGameStarter));
            AfterRegisterSubModuleObjectsInstance = AccessTools2.GetDelegate<AfterRegisterSubModuleObjectsDelegate, MBSubModuleBase>(subModule, nameof(AfterRegisterSubModuleObjects));
            AfterAsyncTickTickInstance = AccessTools2.GetDelegate<AfterAsyncTickTickDelegate, MBSubModuleBase>(subModule, nameof(AfterAsyncTickTick));
        }

        protected override void OnSubModuleLoad() => OnSubModuleLoadInstance?.Invoke();
        protected override void OnSubModuleUnloaded() => OnSubModuleUnloadedInstance?.Invoke();
        protected override void OnApplicationTick(float dt) => OnApplicationTickInstance?.Invoke(dt);
        protected override void OnBeforeInitialModuleScreenSetAsRoot() => OnBeforeInitialModuleScreenSetAsRootInstance?.Invoke();
        protected override void OnGameStart(Game game, IGameStarter gameStarterObject) => OnGameStartInstance?.Invoke(game, gameStarterObject);
        protected override void InitializeGameStarter(Game game, IGameStarter starterObject) => InitializeGameStarterInstance?.Invoke(game, starterObject);
        protected override void AfterAsyncTickTick(float dt) => AfterAsyncTickTickInstance?.Invoke(dt);

        public override bool DoLoading(Game game) => SubModule.DoLoading(game);
        public override void OnGameLoaded(Game game, object initializerObject) => SubModule.OnGameLoaded(game, initializerObject);
        public override void OnCampaignStart(Game game, object starterObject) => SubModule.OnCampaignStart(game, starterObject);
        public override void BeginGameStart(Game game) => SubModule.BeginGameStart(game);
        public override void OnGameEnd(Game game) => SubModule.OnGameEnd(game);
        public override void OnGameInitializationFinished(Game game) => SubModule.OnGameInitializationFinished(game);
        public override void OnBeforeMissionBehaviorInitialize(Mission mission) => SubModule.OnBeforeMissionBehaviorInitialize(mission);
        public override void OnMissionBehaviorInitialize(Mission mission) => SubModule.OnMissionBehaviorInitialize(mission);
        public override void OnMultiplayerGameStart(Game game, object starterObject) => SubModule.OnMultiplayerGameStart(game, starterObject);
        public override void OnNewGameCreated(Game game, object initializerObject) => SubModule.OnNewGameCreated(game, initializerObject);
        public override void RegisterSubModuleObjects(bool isSavedCampaign) => SubModule.RegisterSubModuleObjects(isSavedCampaign);
        public override void OnAfterGameInitializationFinished(Game game, object starterObject) => SubModule.OnAfterGameInitializationFinished(game, starterObject);
        public override void AfterRegisterSubModuleObjects(bool isSavedCampaign) => AfterRegisterSubModuleObjectsInstance?.Invoke(isSavedCampaign);
        public override void OnConfigChanged() => SubModule.OnConfigChanged();
        public override void OnInitialState() => SubModule.OnInitialState();
    }
}

#pragma warning restore
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE