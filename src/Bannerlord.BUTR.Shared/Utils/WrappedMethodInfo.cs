// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.BUTR.Shared" NuGet package (https://www.nuget.org/packages/Bannerlord.BUTR.Shared).
//   Please see https://github.com/BUTR/Bannerlord.BUTR.Shared for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.BUTR.Shared\Utils" folder and the "WrappedMethodInfo.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BANNERLORDBUTRSHARED_DISABLE
#nullable enable
#pragma warning disable

namespace Bannerlord.BUTR.Shared.Utils
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Globalization;
    using global::System.Reflection;

    internal sealed class WrappedMethodInfo : MethodInfo
    {
        private readonly object _instance;
        private readonly MethodInfo _methodInfoImplementation;
        public WrappedMethodInfo(MethodInfo actualMethodInfo, object instance)
        {
            _methodInfoImplementation = actualMethodInfo;
            _instance = instance;
        }

        public override MethodAttributes Attributes => _methodInfoImplementation.Attributes;
        public override CallingConventions CallingConvention => _methodInfoImplementation.CallingConvention;
        public override bool ContainsGenericParameters => _methodInfoImplementation.ContainsGenericParameters;
        public override IEnumerable<CustomAttributeData> CustomAttributes => _methodInfoImplementation.CustomAttributes;
        public override Type? DeclaringType => _methodInfoImplementation.DeclaringType;
        public override bool IsGenericMethod => _methodInfoImplementation.IsGenericMethod;
        public override bool IsGenericMethodDefinition => _methodInfoImplementation.IsGenericMethodDefinition;
        public override bool IsSecurityCritical => _methodInfoImplementation.IsSecurityCritical;
        public override bool IsSecuritySafeCritical => _methodInfoImplementation.IsSecuritySafeCritical;
        public override bool IsSecurityTransparent => _methodInfoImplementation.IsSecurityTransparent;
        public override MemberTypes MemberType => _methodInfoImplementation.MemberType;
        public override int MetadataToken => _methodInfoImplementation.MetadataToken;
        public override RuntimeMethodHandle MethodHandle => _methodInfoImplementation.MethodHandle;
        public override MethodImplAttributes MethodImplementationFlags => _methodInfoImplementation.MethodImplementationFlags;
        public override Module Module => _methodInfoImplementation.Module;
        public override string Name => _methodInfoImplementation.Name;
        public override Type? ReflectedType => _methodInfoImplementation.ReflectedType;
        public override ParameterInfo ReturnParameter => _methodInfoImplementation.ReturnParameter;
        public override Type ReturnType => _methodInfoImplementation.ReturnType;
        public override ICustomAttributeProvider ReturnTypeCustomAttributes => _methodInfoImplementation.ReturnTypeCustomAttributes;

        public override Delegate CreateDelegate(Type delegateType) => _methodInfoImplementation.CreateDelegate(delegateType);
        public override Delegate CreateDelegate(Type delegateType, object? target) => _methodInfoImplementation.CreateDelegate(delegateType, target);
        public override MethodInfo GetBaseDefinition() => _methodInfoImplementation.GetBaseDefinition();
        public override object[] GetCustomAttributes(bool inherit) => _methodInfoImplementation.GetCustomAttributes(inherit);
        public override object[] GetCustomAttributes(Type attributeType, bool inherit) => _methodInfoImplementation.GetCustomAttributes(attributeType, inherit);
        public override IList<CustomAttributeData> GetCustomAttributesData() => _methodInfoImplementation.GetCustomAttributesData();
        public override Type[] GetGenericArguments() => _methodInfoImplementation.GetGenericArguments();
        public override MethodInfo GetGenericMethodDefinition() => _methodInfoImplementation.GetGenericMethodDefinition();
        public override MethodBody? GetMethodBody() => _methodInfoImplementation.GetMethodBody();
        public override MethodImplAttributes GetMethodImplementationFlags() => _methodInfoImplementation.GetMethodImplementationFlags();
        public override ParameterInfo[] GetParameters() => _methodInfoImplementation.GetParameters();
        public override object? Invoke(object? obj, BindingFlags invokeAttr, Binder? binder, object?[]? parameters, CultureInfo? culture) =>
            _methodInfoImplementation.Invoke(_instance, invokeAttr, binder, parameters, culture);
        public override bool IsDefined(Type attributeType, bool inherit) => _methodInfoImplementation.IsDefined(attributeType, inherit);
        public override MethodInfo MakeGenericMethod(params Type[] typeArguments) => _methodInfoImplementation.MakeGenericMethod(typeArguments);

        public override string? ToString() => _methodInfoImplementation.ToString();
        public override bool Equals(object? obj) => obj switch
        {
            WrappedMethodInfo proxy => _methodInfoImplementation.Equals(proxy._methodInfoImplementation),
            MethodInfo propertyInfo => _methodInfoImplementation.Equals(propertyInfo),
            _ => _methodInfoImplementation.Equals(obj)
        };
        public override int GetHashCode() => _methodInfoImplementation.GetHashCode();
    }
}

#pragma warning restore
#nullable restore
#endif // BANNERLORDBUTRSHARED_DISABLE